{"mappings":"yLAwCYA,EAAAA,KAAaC,GAASC,KAAKC,QACnCD,KAAKE,IAAIC,UAAUC,IAAI,UACvBJ,KAAKE,IAAIG,UA1CO,EAACN,EAAAA,GAAWD,EAAaQ,SACvCC,EAAOT,GAAe,iCAEpBU,EAAQT,EAAKU,KAAKC,QAClBC,EAAM,UACND,EAAKE,KAAON,IACdC,EAAOG,EAAKG,MACZF,EAAM,+CAIoBA,gCAAkCD,EAAKE,OAAOF,EAAKG,iLAOnDN,kKAKtBC,EAAMM,KAAK,oCAmBIC,CAAYhB,EAAMD,EAAaE,KAAKM,yBAIzDN,KAAKgB,aAAehB,KAAKgB,aAAaC,KAAKjB,MAC3CA,KAAKE,IAAIgB,iBAAiB,QAASlB,KAAKgB,cACxChB,KAAKmB,OAASnB,KAAKE,IAAIkB,cAAc,uBACrCpB,KAAKqB,OAASrB,KAAKE,IAAIkB,cAAc,6BC9CnCE,EAAAA,ID0BC,MACLC,YAAYC,EAAUvB,2BACpBD,KAAKE,IAAMuB,SAASL,cAAcI,GAClCxB,KAAKC,QAAUA,EACfD,KAAKM,WAAaL,EAAQK,aAE1BN,KAAA0B,EAAAC,GAAAC,KAAA5B,QACAA,KAAA6B,EAAAC,GAAAF,KAAA5B,MAgBFgB,aAAae,cACHC,GAASD,EAAME,OAAOC,YAEzB,QAAS,QAAS,SAASC,SAASH,GACvChC,KAAKoC,iBACa,SAATJ,EAAS,OACZpB,EAAKmB,EAAME,OAAOC,QAAQtB,GAChCZ,KAAKqC,OAAOzB,OACM,aAAToB,GACThC,KAAKsC,4BAKAtC,KAAKE,IAAIC,UAAUoC,SAAS,6BAI5BvC,KAAKC,QAAQF,KAAKyC,MAAM9B,GAASA,EAAKE,KAAOZ,KAAKM,aAG3D+B,OAAOzB,GACLZ,KAAKM,WAAaM,EAClBZ,KAAKqB,OAAOoB,YAAczC,KAAK0C,QAAQ7B,MAEvCb,KAAKE,IAAIyC,iBAAiB,sBAAsBC,SAASC,IACvDA,EAAG1C,UAAU2C,OAAO,eAEtB9C,KAAKE,IAAIkB,cAAAA,aAA2BR,OAAQT,UAAUC,IAAI,YAE1DJ,KAAKC,QAAQ8C,UAAW/C,KAAKC,QAAQ8C,SAAS/C,KAAK0C,SAEnD1C,KAAKsC,QAGPF,SACEpC,KAAKgD,OAAShD,KAAKsC,QAAUtC,KAAKiD,OAGpCA,OACEjD,KAAKE,IAAIC,UAAUC,IAAI,QACvBJ,KAAKmB,OAAOhB,UAAU2C,OAAO,mBAC7B9C,KAAKmB,OAAOhB,UAAUC,IAAI,iBAG5BkC,QACEtC,KAAKE,IAAIC,UAAU2C,OAAO,QAC1B9C,KAAKmB,OAAOhB,UAAU2C,OAAO,iBAC7B9C,KAAKmB,OAAOhB,UAAUC,IAAI,mBAG5B8C,UACElD,KAAKE,IAAIiD,oBAAoB,QAASnD,KAAKgB,cAC3ChB,KAAKE,IAAIG,UAAY,KCtGC,UAAA,CACxBP,YAAa,4BAEbC,KAAAA,CAAAA,CACIa,GAAI,IAAKC,MAAO,UAChBD,GAAI,IAAKC,MAAO,YAChBD,GAAI,IAAKC,MAAO,QAChBD,GAAI,IAAKC,MAAO,iBAChBD,GAAI,IAAKC,MAAO,SAChBD,GAAI,IAAKC,MAAO,SAEpBkC,SAAAA,SAASrC,GACP0C,QAAQC,IAAI,gBAAiB3C,MAMjC4C,OAAOC,EAAIjC","sources":["./select/select.js","./index.js"],"sourcesContent":["const getTemplate = (data = [], placeholder, selectedId) => {\r\n  let text = placeholder ?? \"Placeholder по умолчанию\";\r\n\r\n  const items = data.map((item) => {\r\n    let cls = '';\r\n    if (item.id === selectedId) {\r\n      text = item.value;\r\n      cls = 'selected';\r\n    }\r\n\r\n    return `\r\n      <li class=\"select__item ${cls}\" data-type=\"item\" data-id=\"${item.id}\">${item.value}</li>\r\n    `;\r\n  });\r\n\r\n  return `\r\n    <div class=\"select__backdrop\" data-type=\"backdrop\"></div>\r\n    <div class=\"select__input\" data-type=\"input\">\r\n      <span data-type=\"value\">${text}</span>\r\n      <i class=\"fa fa-chevron-down\" data-type=\"arrow\"></i>\r\n    </div>\r\n    <div class=\"select__dropdown\">\r\n      <ul class=\"select__list\">\r\n        ${items.join(\"\")}\r\n      </ul>\r\n    </div>\r\n  `;\r\n};\r\n\r\nexport class Select {\r\n  constructor(selector, options) {\r\n    this.$el = document.querySelector(selector);\r\n    this.options = options;\r\n    this.selectedId = options.selectedId;\r\n\r\n    this.#render();\r\n    this.#setup();\r\n  }\r\n\r\n  #render() {\r\n    const { placeholder, data } = this.options;\r\n    this.$el.classList.add(\"select\");\r\n    this.$el.innerHTML = getTemplate(data, placeholder, this.selectedId);\r\n  }\r\n\r\n  #setup() {\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n    this.$el.addEventListener(\"click\", this.clickHandler);\r\n    this.$arrow = this.$el.querySelector('[data-type=\"arrow\"]');\r\n    this.$value = this.$el.querySelector('[data-type=\"value\"]');\r\n  }\r\n\r\n  clickHandler(event) {\r\n    const { type } = event.target.dataset;\r\n\r\n    if (['input', 'value', 'arrow'].includes(type)) {\r\n      this.toggle();\r\n    } else if (type === \"item\") {\r\n      const id = event.target.dataset.id;\r\n      this.select(id);\r\n    } else if (type === 'backdrop') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  get isOpen() {\r\n    return this.$el.classList.contains(\"open\");\r\n  }\r\n\r\n  get current() {\r\n    return this.options.data.find((item) => item.id === this.selectedId);\r\n  }\r\n\r\n  select(id) {\r\n    this.selectedId = id;\r\n    this.$value.textContent = this.current.value;\r\n\r\n    this.$el.querySelectorAll('[data-type=\"item\"]').forEach((el) => {\r\n      el.classList.remove(\"selected\");\r\n    });\r\n    this.$el.querySelector(`[data-id=\"${id}\"]`).classList.add(\"selected\");\r\n\r\n    this.options.onSelect ? this.options.onSelect(this.current) : null;\r\n    \r\n    this.close();\r\n  }\r\n\r\n  toggle() {\r\n    this.isOpen ? this.close() : this.open();\r\n  }\r\n\r\n  open() {\r\n    this.$el.classList.add(\"open\");\r\n    this.$arrow.classList.remove(\"fa-chevron-down\");\r\n    this.$arrow.classList.add(\"fa-chevron-up\");\r\n  }\r\n\r\n  close() {\r\n    this.$el.classList.remove(\"open\");\r\n    this.$arrow.classList.remove(\"fa-chevron-up\");\r\n    this.$arrow.classList.add(\"fa-chevron-down\");\r\n  }\r\n\r\n  destroy() {\r\n    this.$el.removeEventListener(\"click\", this.clickHandler);\r\n    this.$el.innerHTML = '';\r\n  }\r\n}\r\n","import { Select } from './select/select';\r\nimport './select/styles.scss';\r\n\r\nconst select = new Select('#select', {\r\n  placeholder: 'Выбери пожалуйста элемент',\r\n  // selectedId: '2',\r\n  data: [\r\n    { id: '1', value: 'React' },\r\n    { id: '2', value: 'Angular' },\r\n    { id: '3', value: 'Vue' },\r\n    { id: '4', value: 'React Native' },\r\n    { id: '5', value: 'Next' },\r\n    { id: '6', value: 'Nest' },\r\n  ],\r\n  onSelect(item) {\r\n    console.log('Selected item', item);\r\n  },\r\n});\r\n\r\n// select.select(4);\r\n\r\nwindow.s = select;"],"names":["placeholder","data","this","options","$el","classList","add","innerHTML","selectedId","text","items","map","item","cls","id","value","join","$601187c7c00da8a8ed61a22975d0e668$var$getTemplate","clickHandler","bind","addEventListener","$arrow","querySelector","$value","$f7cc2df98f0dd786ece54ee206a6d458$var$select","constructor","selector","document","$601187c7c00da8a8ed61a22975d0e668$var$_render","$601187c7c00da8a8ed61a22975d0e668$var$_render2","call","$601187c7c00da8a8ed61a22975d0e668$var$_setup","$601187c7c00da8a8ed61a22975d0e668$var$_setup2","event","type","target","dataset","includes","toggle","select","close","contains","find","textContent","current","querySelectorAll","forEach","el","remove","onSelect","isOpen","open","destroy","removeEventListener","console","log","window","s"],"version":3,"file":"index.30b117fc.js.map"}